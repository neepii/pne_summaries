** PRAKTIKA NA EVM
** 25-11-2024

* Литература
Книжка Хопкрафта про автоматы

* Регулярные выражения

< Q, Sigma, q0, F, delta > - конечный автомат (Упорядочная пятёрка)

** Определение
Регулярные выражения
L = {w1, w2, ..., wn } - множество слов

* TODO Напиши это в техе, лол

L1 = {w1, w2, ...}
L2 = {v1, v2, ...}
** Операции:
L1 U L2 = {w1, v1, w2, v2, ...} - объединение языков (Альтернатива)
L1 * L2 - {w1v1, w1v2, w2v1, w2v2, ...} - конкатенация 

L* = {epsilon, w1, w1w1, w1w2, w2w1, w2w2, w1w1w1, w1w1w2, ...} - звезда Клини
(всевозможные конкатенации)
 
Каждому автомату соответсвует регулярный язык
Это можно доказать

** Пример
Этот автомат... 
--> (.) -\
    /|\  | Sigma = {0, 1}
     \-- /
Эквивалентен этому языку (0|1)* = ({0}U{1})*

{0,1}* = {epsilon, 0, 1, 00, 01, 10, 11, 000, 001, 010, 011, 100, 101, 110, 111, ...}

* Иерархия Хомского
4 типа языка

* КС-грамматика
Контекстно-свободная грамматика

<Sigma, N, S>

, где 
Sigma - множество терминальных символов
N - множество нетерминальных символов
S - стартовый символ, принадлежит N
p - продукция, подмножество N x (Sigma|N)*

N1 -> alpha принадлежит (Sigma|N)*

Нельзя заменить автоматом

** Пример

<{ (, ) }, {S}, S, p>

 Продукции:
 S -> epsilon
 S -> (S)S

 Применяем продукции:
 S -> (S)S -> ((S)S)S -> ((S)S)(S)S -> (()S)(S)S ->  (())(S)S ->  (())()S -> (())()

Можно так записать продукции:
S -> epsilon | (S)S

** МП-автомат
Автомат с магазинной памятью
<Sigma, Gamma, Q, q0, z0, delta, F>
, где
Gamma - множество символов стэка (магазинная память)
z0 - Маркер дна/Начальный символ стэка

По другому определяется дельта функция:
delta : Q x Sigma x Gamma -> Gamma*

* Гуглить
** ANTLR
** Lexer hack for C
** Рекурсивный спуск
** Парсер-комбинатор
** ll(k) парсер
** GLR parser
** GLL parser

* Не все языки программирования КС-языки 

* Грамматика для арифметических выражнений
Num -> ...
Expr -> Num
      | (Expr + Expr) 
      | (Expr - Expr) 
      | (Expr * Expr) 
      | (Expr / Expr) 
