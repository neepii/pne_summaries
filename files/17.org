** PRAKTIKA NA EVM
** 18-11-2024

* Пишем свою хэш таблицу!

** Массив данных 
key: char*
value: void*

hashtable
+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+
   |
  ( )
   |
  ( )
   |
  NULL
Linked list

Пусть массив бакетов будет динамичным
Нужна структура для списков 


** Переменные
 capacity - число бакетов
 size - число элементов 

 Пусть сделаем так, чтобы size / capacity > 4 

** Основные функции

- add(key, value)
 Найти значение хэш функции по модулю и добавляем элемент в бакет 
 После проверяем size / capacity > 4 
  
- find(key)
  Найти значение хэш функции по модулю, потом находим элемент в списке, сравнивая значение

- remove(key)
 найти элемент и убрать его из списка 

** Списки
используем "sys/queue.h"
man list для справки

** Код
Код находится в папке src/17

TODO: fix bad API, потому что мы возвращаем NULL как успешный код возрата (когда нечего возвращать) и как неудачный код возврата. 

* Good practice

size_t - тип предназначеннный для хранения размера чего-либо
ssize_t - тип предназначеннный для хранения размера чего-либо И для индикации ошибки. В ней можно хранить -1.
